<head>
    <link href="https://fonts.googleapis.com/css2?family=Amiri&display=swap" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="FrontPageIndex.css" />
    <link rel="stylesheet" href="navStyle.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Establishment</title>

<style>
  .admin-container {  
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }

  .admin-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 30px;
    border-radius: 10px;
    margin-bottom: 30px;
    text-align: center;
  }

  .admin-header h1 {
    margin: 0;
    font-size: 2.5em;
    font-weight: 300;
  }

  .admin-header p {
    margin: 10px 0 0 0;
    opacity: 0.9;
    font-size: 1.1em;
  }

  .admin-content {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 30px;
    margin-bottom: 30px;
  }

  .add-establishment-form {
    background: white;
    padding: 25px;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    height: fit-content;
  }

  .form-title {
    color: #333;
    margin-bottom: 20px;
    font-size: 1.5em;
    font-weight: 600;
  }

  .form-group {
    margin-bottom: 20px;
  }

  .form-group label {
    display: block;
    margin-bottom: 8px;
    color: #555;
    font-weight: 500;
  }

  .form-group input,
  .form-group textarea,
  .form-group select {
    width: 100%;
    padding: 12px;
    border: 2px solid #e1e5e9;
    border-radius: 8px;
    font-size: 14px;
    transition: border-color 0.3s ease;
    box-sizing: border-box;
  }

  .form-group input:focus,
  .form-group textarea:focus,
  .form-group select:focus {
    outline: none;
    border-color: #667eea;
  }

  .form-group textarea {
    resize: vertical;
    min-height: 80px;
  }

  .required {
    color: #e74c3c;
  }

  .btn {
    padding: 12px 24px;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .btn-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
  }

  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(102, 126, 234, 0.4);
  }

  .btn-danger {
    background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
    color: white;
  }

  .btn-danger:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(231, 76, 60, 0.4);
  }

  .btn-edit {
    background: linear-gradient(135deg, #f39c12 0%, #e67e22 100%);
    color: white;
    margin-right: 10px;
  }

  .btn-edit:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(243, 156, 18, 0.4);
  }

  .establishments-list {
    background: white;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }

  .list-header {
    background: #f8f9fa;
    padding: 20px;
    border-bottom: 1px solid #e9ecef;
  }

  .list-header h2 {
    margin: 0;
    color: #333;
    font-size: 1.5em;
    font-weight: 600;
  }

  .establishment-item {
    padding: 20px;
    border-bottom: 1px solid #e9ecef;
    transition: background-color 0.3s ease;
  }

  .establishment-item:hover {
    background-color: #f8f9fa;
  }

  .establishment-item:last-child {
    border-bottom: none;
  }

  .establishment-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
  }

  .establishment-name {
    font-size: 1.2em;
    font-weight: 600;
    color: #333;
    margin: 0;
  }

  .establishment-cuisine {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 4px 12px;
    border-radius: 20px;
    font-size: 0.8em;
    font-weight: 500;
  }

  .establishment-details {
    color: #666;
    font-size: 0.9em;
    line-height: 1.5;
  }

  .establishment-actions {
    margin-top: 15px;
    display: flex;
    gap: 10px;
  }

  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .modal-content {
    background-color: white;
    margin: 5% auto;
    padding: 30px;
    border-radius: 10px;
    width: 90%;
    max-width: 600px;
    position: relative;
  }

  .close {
    position: absolute;
    right: 20px;
    top: 15px;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
    color: #aaa;
  }

  .close:hover {
    color: #333;
  }

  .alert {
    padding: 15px;
    margin-bottom: 20px;
    border-radius: 8px;
    font-weight: 500;
  }

  .alert-success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }

  .alert-error {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }

  .empty-state {
    text-align: center;
    padding: 60px 20px;
    color: #666;
  }

  .empty-state h3 {
    margin-bottom: 10px;
    color: #333;
  }

  .loading {
    text-align: center;
    padding: 40px;
    color: #666;
  }

  .spinner {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #667eea;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin: 0 auto 20px;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  @media (max-width: 768px) {
    .admin-content {
      grid-template-columns: 1fr;
    }
    
    .establishment-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 10px;
    }
    
    .establishment-actions {
      flex-wrap: wrap;
    }
  }

  body {
    padding-top: 80px; /* shifts all page content down */
}

</style>

</head>



{{>navBar}}

<body>

{{!-- {{#if add_est_error_msg}}
  <div class="message-overlay" status="error">
      <div>
          <button class="close-message" onclick="this.parentElement.parentElement.remove()">&times;</button>
          <h6 style="color: #f44336;"><strong>{{add_est_error_msg}}</strong></h6>
      </div>
  </div>
{{/if}} --}}

<div class="admin-container">
  <div class="admin-header">
    <h1>Establishment Management</h1>
    <p>Add, edit, and manage restaurant establishments</p>
  </div>

  <div class="admin-content">
    <!-- Add Establishment Form -->
    <div class="add-establishment-form">
      <h2 class="form-title">Add New Establishment</h2>
      <form id="addEstablishmentForm">
        <div class="form-group">
          <label for="name">Establishment Name <span class="required">*</span></label>
          <input type="text" id="name" name="addName" required>
        </div>

        <div class="form-group">
          <label for="cuisine">Cuisine Type <span class="required">*</span></label>
          <input type="text" id="cuisine" name="addCuisine" required>
        </div>

        <div class="form-group">
          <label for="meals">Meals Served</label>
          <input type="text" id="meals" name="addMeals" placeholder="e.g., Breakfast, Lunch, Dinner">
        </div>

        <div class="form-group">
          <label for="features">Features</label>
          <textarea id="features" name="addFeatures" placeholder="e.g., Outdoor seating, Delivery, Takeout"></textarea>
        </div>

        <div class="form-group">
          <label for="locations">Location <span class="required">*</span></label>
          <input type="text" id="locations" name="addLocations" required placeholder="e.g., Makati, Quezon City">
        </div>

        <div class="form-group">
          <label for="website">Website</label>
          <input type="url" id="website" name="addWebsite" placeholder="https://example.com">
        </div>

        <div class="form-group">
          <label for="phone">Phone Number</label>
          <input type="tel" id="phone" name="addPhone" placeholder="+63 912 345 6789">
        </div>

        <div class="form-group">
          <label for="password">Password</label>
          <input type="password" id="password" name="addPassword" placeholder="Password">
        </div>



        <button type="submit" class="btn btn-primary">Add Establishment</button>
      </form>
    </div>

    <!-- Establishments List -->
    <div class="establishments-list">
      <div class="list-header">
        <h2>Current Establishments ({{establishments.length}})</h2>
      </div>
      
      <div id="establishmentsList">
        {{#if establishments.length}}
          {{#each establishments}}
            <div class="establishment-item" data-id="{{_id}}">
              <div class="establishment-header">
                <h3 class="establishment-name">{{name}}</h3>
                <span class="establishment-cuisine">{{cuisine}}</span>
              </div>
              <div class="establishment-details">
                {{#if meals}}<strong>Meals:</strong> {{meals}}<br>{{/if}}
                {{#if features}}<strong>Features:</strong> {{features}}<br>{{/if}}
                <strong>Location:</strong> {{locations}}<br>
                {{#if website}}<strong>Website:</strong> <a href="{{website}}" target="_blank">{{website}}</a><br>{{/if}}
                {{#if phone}}<strong>Phone:</strong> {{phone}}{{/if}}
              </div>
              <div class="establishment-actions">
                <button class="btn btn-edit" onclick="editEstablishment('{{_id}}')">Edit</button>
                <button class="btn btn-danger" onclick="deleteEstablishment('{{_id}}', '{{name}}')">Delete</button>
              </div>
            </div>
          {{/each}}
        {{else}}
          <div class="empty-state">
            <h3>No establishments found</h3>
            <p>Add your first establishment using the form on the left.</p>
          </div>
        {{/if}}
      </div>
    </div>
  </div>
</div>

<!-- Edit Modal -->
<div id="editModal" class="modal">
  <div class="modal-content">
    <span class="close" onclick="closeEditModal()">&times;</span>
    <h2>Edit Establishment</h2>
    <form id="editEstablishmentForm">
      <input type="hidden" id="editId" name="id">
      
      <div class="form-group">
        <label for="editName">Establishment Name <span class="required">*</span></label>
        <input type="text" id="editName" name="name" required>
      </div>

      <div class="form-group">
        <label for="editCuisine">Cuisine Type <span class="required">*</span></label>
        <input type="text" id="editCuisine" name="cuisine" required>
      </div>

      <div class="form-group">
        <label for="editMeals">Meals Served</label>
        <input type="text" id="editMeals" name="meals" placeholder="e.g., Breakfast, Lunch, Dinner">
      </div>

      <div class="form-group">
        <label for="editFeatures">Features</label>
        <textarea id="editFeatures" name="features" placeholder="e.g., Outdoor seating, Delivery, Takeout"></textarea>
      </div>

      <div class="form-group">
        <label for="editLocations">Location <span class="required">*</span></label>
        <input type="text" id="editLocations" name="locations" required placeholder="e.g., Makati, Quezon City">
      </div>

      <div class="form-group">
        <label for="editWebsite">Website</label>
        <input type="url" id="editWebsite" name="website" placeholder="https://example.com">
      </div>

      <div class="form-group">
        <label for="editPhone">Phone Number</label>
        <input type="tel" id="editPhone" name="phone" placeholder="+63 912 345 6789">
      </div>

      <div style="display: flex; gap: 10px; margin-top: 20px;">
        <button type="submit" class="btn btn-primary">Update Establishment</button>
        <button type="button" class="btn btn-danger" onclick="closeEditModal()">Cancel</button>
      </div>
    </form>
  </div>
</div>
</body>


<script>
  // Add Establishment
  document.getElementById('addEstablishmentForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const data = Object.fromEntries(formData);
    
    try {
      const response = await fetch('/establishments/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
      });
      
      const result = await response.json();
      
      if (result.success) {
        showAlert(result.message, 'success');
        this.reset();
        location.reload(); // Refresh to show new establishment
      } else {
        //showAlert(result.message, 'error');
        document.querySelector('.message-overlay')?.remove();

        // Create the same structure as your Handlebars template
        const overlay = document.createElement('div');
        overlay.className = 'message-overlay';
        overlay.setAttribute('status', 'error');
        overlay.innerHTML = `
          <div>
            <button class="close-message" onclick="this.parentElement.parentElement.remove()">&times;</button>
            <h6 style="color: #f44336;"><strong>${result.message}</strong></h6>
          </div>
        `;
        document.body.prepend(overlay);
        
      }
    } catch (error) {
      showAlert('Error adding establishment. Please try again.', 'error');
    }
  });

  // Delete Establishment
  async function deleteEstablishment(id, name) {
    if (!confirm(`Are you sure you want to delete "${name}"? This action cannot be undone.`)) {
      return;
    }
    
    try {
      const response = await fetch(`/establishments/${id}`, {
        method: 'DELETE'
      });
      
      const result = await response.json();
      
      if (result.success) {
        showAlert(result.message, 'success');
        document.querySelector(`[data-id="${id}"]`).remove();
        
        // Update count
        const count = document.querySelectorAll('.establishment-item').length;
        const header = document.querySelector('.list-header h2');
        header.textContent = `Current Establishments (${count})`;
        
        // Show empty state if no establishments left
        if (count === 0) {
          document.getElementById('establishmentsList').innerHTML = `
            <div class="empty-state">
              <h3>No establishments found</h3>
              <p>Add your first establishment using the form on the left.</p>
            </div>
          `;
        }
      } else {
        showAlert(result.message, 'error');
      }
    } catch (error) {
      showAlert('Error deleting establishment. Please try again.', 'error');
    }
  }

  // Edit Establishment
  function editEstablishment(id) {
    const item = document.querySelector(`[data-id="${id}"]`);
    const name = item.querySelector('.establishment-name').textContent;
    const cuisine = item.querySelector('.establishment-cuisine').textContent;
    const details = item.querySelector('.establishment-details').textContent;
    
    // Extract other fields from details text
    const mealsMatch = details.match(/Meals: ([^\n]+)/);
    const featuresMatch = details.match(/Features: ([^\n]+)/);
    const locationsMatch = details.match(/Location: ([^\n]+)/);
    const websiteMatch = details.match(/Website: ([^\n]+)/);
    const phoneMatch = details.match(/Phone: ([^\n]+)/);
    
    document.getElementById('editId').value = id;
    document.getElementById('editName').value = name;
    document.getElementById('editCuisine').value = cuisine;
    document.getElementById('editMeals').value = mealsMatch ? mealsMatch[1].trim() : '';
    document.getElementById('editFeatures').value = featuresMatch ? featuresMatch[1].trim() : '';
    document.getElementById('editLocations').value = locationsMatch ? locationsMatch[1].trim() : '';
    document.getElementById('editWebsite').value = websiteMatch ? websiteMatch[1].trim() : '';
    document.getElementById('editPhone').value = phoneMatch ? phoneMatch[1].trim() : '';
    
    document.getElementById('editModal').style.display = 'block';
  }

  // Update Establishment
  document.getElementById('editEstablishmentForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const data = Object.fromEntries(formData);
    const id = data.id;
    delete data.id;
    
    try {
      const response = await fetch(`/establishments/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
      });
      
      const result = await response.json();
      
      if (result.success) {
        showAlert(result.message, 'success');
        closeEditModal();
        location.reload(); // Refresh to show updated establishment
      } else {
        showAlert(result.message, 'error');
      }
    } catch (error) {
      showAlert('Error updating establishment. Please try again.', 'error');
    }
  });

  function closeEditModal() {
    document.getElementById('editModal').style.display = 'none';
  }

  function showAlert(message, type) {
    // Remove existing alerts
    const existingAlerts = document.querySelectorAll('.alert');
    existingAlerts.forEach(alert => alert.remove());
    
    // Create new alert
    const alert = document.createElement('div');
    alert.className = `alert alert-${type}`;
    alert.textContent = message;
    
    // Insert at the top of the admin container
    const container = document.querySelector('.admin-container');
    container.insertBefore(alert, container.firstChild);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
      alert.remove();
    }, 5000);
  }

  // Close modal when clicking outside
  window.onclick = function(event) {
    const modal = document.getElementById('editModal');
    if (event.target === modal) {
      closeEditModal();
    }
  }
</script>
